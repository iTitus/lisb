(machine
  :Life
  (sets
    (deferred-set :PERSON)
    (enumerated-set :SEX :boy :girl))
  (variables :male :female)
  (invariants
    (subset? :male :PERSON)
    (subset? :female :PERSON)
    (= (intersection :male :female) #{}))
  (init
    (parallel-sub
      (assign :male #{})
      (assign :female #{})))
  (operations
    (:born [:nn :ss] (pre
                       (and
                         (member? :nn :PERSON)
                         (not (member? :nn (union :male :female)))
                         (member? :ss :SEX))
                       (if-sub (= :ss :boy)
                         (assign :male (union :male #{:nn}))
                         (assign :female (union :female #{:nn})))))
    (:die [:nn] (pre
                  (and
                    (member? :nn :PERSON)
                    (member? :nn (union :male :female)))
                  (if-sub (member? :nn :male)
                    (assign :male (- :male #{:nn}))
                    (assign :female (- :female #{:nn})))))))