(machine
  [:GenericTimersMC :TIMERS]
  (variables :curDeadlines)
  (invariants
    (member? :curDeadlines (+-> :TIMERS natural-set)))
  (init (assign :curDeadlines #{}))
  (operations
    (operation [] :AbsoluteSetDeadline [:timer :deadline]
      (pre (and (member? :timer :TIMERS) (member? :deadline natural-set))
        (assign (fn-call :curDeadlines :timer) :deadline)))
    (operation [] :AddDeadline [:timer :deadline]
      (pre (and (member? :timer :TIMERS) (member? :deadline natural-set))
        (assign (fn-call :curDeadlines :timer) :deadline)))
    (operation [] :TimeoutDeadline [:timer :deadline]
      (pre (and (member? :timer :TIMERS) (member? :deadline natural-set))
        (assign :curDeadlines (set- :curDeadlines #{[:timer :deadline]}))))
    (operation [] :IncreaseTime [:delta]
      (select (and (member? :delta natural-set) (=> (not= :curDeadlines #{}) (<= :delta (min (ran :curDeadlines)))))
        (assign :curDeadlines (lambda [:x] (member? :x (dom :curDeadlines)) (- (fn-call :curDeadlines :x) :delta)))))
    (operation [] :IncreaseTimeUntilDeadline [:timer :delta]
      (select (and
                (member? :delta natural-set)
                (member? :timer (dom :curDeadlines))
                (= :delta (min (ran :curDeadlines)))
                (= :delta (fn-call :curDeadlines :timer)))
        (assign :curDeadlines
          (lambda [:x] (member? :x (set- (dom :curDeadlines) #{:timer})) (- (fn-call :curDeadlines :x) :delta)))))))